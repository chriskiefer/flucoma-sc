TITLE:: FluidBufChroma
SUMMARY:: A histogram of pitch classes on a Buffer
CATEGORIES:: Libraries>FluidCorpusManipulation
RELATED:: Classes/FluidChroma,Classes/FluidBufPitch,Classes/FluidBufLoudness,Classes/FluidBufMFCC,Classes/FluidBufSpectralShape,Classes/FluidBufStats,Guides/FluidCorpusManipulationToolkit,Classes/FluidBufMFCC
DESCRIPTION::

    
    This class computes a histogram of the energy contained for each pitch class across the analysis frequency range.


    
    Also known as a chromagram, this typically allows you to get a contour of how much each semitone is represented in the spectrum over time. The number of chroma bins (and, thus, pitch classes) and the central reference frequency can be adjusted.

    The process will return a single multichannel buffer of STRONG::numChroma:: per input channel. Each frame represents a value, which is every hopSize.


CLASSMETHODS::

METHOD:: process, processBlocking
  Processs the source LINK::Classes/Buffer:: on the LINK::Classes/Server::. CODE::processBlocking:: will execute directly in the server command FIFO, whereas CODE::process:: will delegate to a separate worker thread. The latter is generally only worthwhile for longer-running jobs where you don't wish to tie up the server.

ARGUMENT:: server
	The LINK::Classes/Server:: on which the buffers to be processed are allocated.

ARGUMENT:: source

    
    The index of the buffer to use as the source material to be analysed. The different channels of multichannel buffers will be processing sequentially.


ARGUMENT:: startFrame

    
    Where in the srcBuf should the process start, in sample.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ::

ARGUMENT:: numFrames

    
    How many frames should be processed.


ARGUMENT:: startChan

    
    For multichannel srcBuf, which channel should be processed first.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ::

ARGUMENT:: numChans

    
    For multichannel srcBuf, how many channel should be processed.


ARGUMENT:: features

    
    The destination buffer for the STRONG::numChroma:: to be written to.


ARGUMENT:: numChroma

    
    The number of chroma bins per octave. It will determine how many channels are output per input channel.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 2

    ## 
    Maximum: CODE::maxNumChroma::

    ::

ARGUMENT:: ref

    
    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ## 
    Maximum: 22000

    ::

ARGUMENT:: normalize

    
    This flag enables the scaling of the output. It is off (0) by default. (1) will normalise each frame to sum to 1. (2) normalises each frame relative to the loudest chroma bin being 1.


ARGUMENT:: minFreq

    
    The lower frequency included in the analysis, in Hz.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ::

ARGUMENT:: maxFreq

    
    The highest frequency included in the analysis, in Hz.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: -1

    ::

ARGUMENT:: windowSize

    
    The window size. As chroma description relies on spectral frames, we need to decide what precision we give it spectrally and temporally, in line with Gabor Uncertainty principles. LINK::http://www.subsurfwiki.org/wiki/Gabor_uncertainty::


ARGUMENT:: hopSize

    
    The window hop size. As chroma description relies on spectral frames, we need to move the window forward. It can be any size but low overlap will create audible artefacts.


ARGUMENT:: fftSize

    
    The inner FFT/IFFT size. It should be at least 4 samples long, at least the size of the window, and a power of 2. Making it larger allows an oversampling of the spectral precision.


ARGUMENT:: padding

    
    Controls the zero-padding added to either end of the source buffer or segment. Possible values are 0 (no padding), 1 (default, half the window size), or 2 (window size - hop size). Padding ensures that all input samples are completely analysed: with no padding, the first analysis window starts at time 0, and the samples at either end will be tapered by the STFT windowing function. Mode 1 has the effect of centering the first sample in the analysis window and ensuring that the very start and end of the segment are accounted for in the analysis. Mode 2 can be useful when the overlap factor (window size / hop size) is greater than 2, to ensure that the input samples at either end of the segment are covered by the same number of analysis frames as the rest of the analysed material.


 
ARGUMENT:: freeWhenDone
  Free the server instance when processing complete. Default CODE::true::

ARGUMENT:: action
	A function to be evaluated once the offline process has finished and all Buffer's instance variables have been updated on the client side. The function will be passed CODE::[features]:: as an argument.

RETURNS:: An instance of the processor

METHOD:: kr
  Trigger the equivalent behaviour to CODE::processBlocking / process:: from a LINK::Classes/Synth::. Can be useful for expressing a sequence of buffer and data processing jobs to execute. Note that the work still executes on the server command FIFO (not the audio thread), and it is the caller's responsibility to manage the sequencing, using the CODE::done:: status of the various UGens.
ARGUMENT:: source

    
    The index of the buffer to use as the source material to be analysed. The different channels of multichannel buffers will be processing sequentially.


ARGUMENT:: startFrame

    
    Where in the srcBuf should the process start, in sample.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ::

ARGUMENT:: numFrames

    
    How many frames should be processed.


ARGUMENT:: startChan

    
    For multichannel srcBuf, which channel should be processed first.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ::

ARGUMENT:: numChans

    
    For multichannel srcBuf, how many channel should be processed.


ARGUMENT:: features

    
    The destination buffer for the STRONG::numChroma:: to be written to.


ARGUMENT:: numChroma

    
    The number of chroma bins per octave. It will determine how many channels are output per input channel.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 2

    ## 
    Maximum: CODE::maxNumChroma::

    ::

ARGUMENT:: ref

    
    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ## 
    Maximum: 22000

    ::

ARGUMENT:: normalize

    
    This flag enables the scaling of the output. It is off (0) by default. (1) will normalise each frame to sum to 1. (2) normalises each frame relative to the loudest chroma bin being 1.


ARGUMENT:: minFreq

    
    The lower frequency included in the analysis, in Hz.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: 0

    ::

ARGUMENT:: maxFreq

    
    The highest frequency included in the analysis, in Hz.

    STRONG::Constraints::

    LIST::
    ## 
    Minimum: -1

    ::

ARGUMENT:: windowSize

    
    The window size. As chroma description relies on spectral frames, we need to decide what precision we give it spectrally and temporally, in line with Gabor Uncertainty principles. LINK::http://www.subsurfwiki.org/wiki/Gabor_uncertainty::


ARGUMENT:: hopSize

    
    The window hop size. As chroma description relies on spectral frames, we need to move the window forward. It can be any size but low overlap will create audible artefacts.


ARGUMENT:: fftSize

    
    The inner FFT/IFFT size. It should be at least 4 samples long, at least the size of the window, and a power of 2. Making it larger allows an oversampling of the spectral precision.


ARGUMENT:: padding

    
    Controls the zero-padding added to either end of the source buffer or segment. Possible values are 0 (no padding), 1 (default, half the window size), or 2 (window size - hop size). Padding ensures that all input samples are completely analysed: with no padding, the first analysis window starts at time 0, and the samples at either end will be tapered by the STFT windowing function. Mode 1 has the effect of centering the first sample in the analysis window and ensuring that the very start and end of the segment are accounted for in the analysis. Mode 2 can be useful when the overlap factor (window size / hop size) is greater than 2, to ensure that the input samples at either end of the segment are covered by the same number of analysis frames as the rest of the analysed material.


 
ARGUMENT:: trig
  A CODE::kr:: signal that will trigger execution

ARGUMENT:: blocking
  Whether to execute this process directly on the server command FIFO or delegate to a worker thread. See CODE::processBlocking/process:: for caveats.


INSTANCEMETHODS::
METHOD:: kr
  Returns a UGen that reports the progress of the running task when executing in a worker thread. Calling code::scope:: with this can be used for a convinient progress monitor

METHOD:: cancel
  Cancels non-blocking processing

METHOD:: wait
  When called in the context of a LINK::Classes/Routine:: (it won't work otherwise), will block execution until the processor has finished. This can be convinient for writing sequences of processes more linearly than using lots of nested actions.
  
EXAMPLES::

code::
// create some buffers
(
b = Buffer.read(s,File.realpath(FluidBufChroma.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-SlideChoirAdd-M.wav");
c = Buffer.new(s);
)

// run the process with basic parameters
(
Routine{
	t = Main.elapsedTime;
	FluidBufChroma.process(s, b, features: c, windowSize: 4096).wait;
	(Main.elapsedTime - t).postln;
}.play
)

// listen to the source and look at the buffer
b.play;
c.plot
::

STRONG::A stereo buffer example.::
CODE::

// load two very different files
(
b = Buffer.read(s,File.realpath(FluidBufChroma.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-SA-UprightPianoPedalWide.wav");
c = Buffer.read(s,File.realpath(FluidBufChroma.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-AaS-AcousticStrums-M.wav");
)

// composite one on left one on right as test signals
FluidBufCompose.process(s, c, numFrames:b.numFrames, startFrame:555000,destStartChan:1, destination:b)
b.play

// create a buffer as destinations
c = Buffer.new(s);

//run the process on them
(
Routine{
    t = Main.elapsedTime;
	FluidBufChroma.process(s, b, features: c, windowSize: 4096).wait;
    (Main.elapsedTime - t).postln;
}.play
)

// look at the buffer: 12 chroma bins for left, then 12 chroma bins for right
c.plot(separately:true)
::
